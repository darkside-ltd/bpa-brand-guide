---
import pant from 'nearest-pantone';

const { name, hex, pantone } = Astro.props;

const colour = hex
const url = "https://www.thecolorapi.com/id?hex=" + colour
const response = await fetch(url);
const data = await response.json();
// const result = data.results[0];
// console.log({data})

async function getPantone(v) {
    // console.log({v})
    return pant.getClosestColor(v)
}
const pantoneColor = await getPantone(data?.hex?.value) 
let pantoneValue  = pantoneColor?.pantone
// Pantone Override
if(pantone) pantoneValue = pantone

let cmyk = data.cmyk.value
cmyk = cmyk.replace('cmyk','')
cmyk = cmyk.replace('(','')
cmyk = cmyk.replace(')','')

let rgb = data.rgb.value
rgb = rgb.replace('rgb','')
rgb = rgb.replace('(','')
rgb = rgb.replace(')','')

---

<div class="colour">
    <div class="block-colour" style=`color: ${data.contrast.value}; background-color:${data.hex.value}`>
        {name}<br>

        <div class="colour-values">
            <div>HEX</div><div class="value">{data.hex.value}</div>
            <div>RGB</div><div class="value">{rgb}</div>
            <div>CMYK</div><div class="value">{cmyk}</div>
            {pantoneValue && ( <div>Pantone</div><div class="value">{pantoneValue}</div> )}
        </div>
    </div>
</div>

<style lang="scss">
.block-colour {
padding:1em;
padding-top:4em;
}

.colour-values{
    display:inline-grid;
    grid-template-columns: 1fr 1fr;
    .value {
        font-variant-numeric: tabular-nums;
    }
}
</style>